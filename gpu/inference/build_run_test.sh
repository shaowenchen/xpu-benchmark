#!/bin/bash

set -e

# Parse command line arguments
BUILD_ONLY=false
TEST_ONLY=false
SERVE_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --build-only)
            BUILD_ONLY=true
            shift
            ;;
        --test-only)
            TEST_ONLY=true
            shift
            ;;
        --serve)
            SERVE_MODE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--build-only|--test-only|--serve]"
            exit 1
            ;;
    esac
done

# Validate conflicting options
if [ "$BUILD_ONLY" = true ] && [ "$TEST_ONLY" = true ]; then
    echo "[ERROR] Cannot use --build-only and --test-only together"
    exit 1
fi

if [ "$BUILD_ONLY" = true ] && [ "$SERVE_MODE" = true ]; then
    echo "[ERROR] Cannot use --build-only and --serve together"
    exit 1
fi

echo "=== Step 0: Update code repository ==="
git pull

IMAGE_NAME="xpu-benchmark:gpu-inference"
CONTAINER_NAME="xpu-benchmark-test"
HOST_PORT=8000
CONTAINER_PORT=8000

# Detect container tool: use nerdctl only
if command -v nerdctl >/dev/null 2>&1; then
  echo "Using nerdctl as container tool"
else
  echo "[ERROR] nerdctl not found, please install nerdctl"
  exit 1
fi

# Check if nerdctl is available
check_nerdctl() {
  if ! nerdctl info >/dev/null 2>&1; then
    echo "[ERROR] nerdctl connection failed"
    return 1
  fi
  return 0
}

echo "=== Step 1: Check nerdctl status ==="
if ! check_nerdctl; then
  exit 1
fi

# Build section
if [ "$TEST_ONLY" != true ]; then
    echo "=== Step 2: Build Docker image ==="

    # Check if image already exists
    if nerdctl images | grep -q "$IMAGE_NAME"; then
        echo "Found existing image: $IMAGE_NAME"
        echo "Using existing image as cache..."
        
        # Build with cache from existing image
        nerdctl build \
            --cache-from $IMAGE_NAME \
            --tag $IMAGE_NAME \
            .
    else
        echo "No existing image found, building from scratch..."
        
        # First time build
        nerdctl build --tag $IMAGE_NAME .
    fi
    
    if [ "$BUILD_ONLY" = true ]; then
        echo "=== Build completed ==="
        exit 0
    fi
fi

# Test section
if [ "$BUILD_ONLY" != true ]; then
    echo "=== Step 3: Start container (background) ==="
    nerdctl rm -f $CONTAINER_NAME >/dev/null 2>&1 || true
    nerdctl run -d \
      --gpus all \
      --name $CONTAINER_NAME \
      -p $HOST_PORT:$CONTAINER_PORT \
      -v "$(pwd)/../reports:/app/reports" \
      $IMAGE_NAME

    echo "=== Step 4: Wait for service to start... ==="
    # Wait up to 60 seconds
    for i in {1..30}; do
      sleep 2
      if curl -s http://localhost:$HOST_PORT/health | grep -q '"status"'; then
        echo "Service started"
        break
      fi
      if [ $i -eq 30 ]; then
        echo "Service startup timeout, exiting"
        nerdctl logs $CONTAINER_NAME
        nerdctl rm -f $CONTAINER_NAME
        exit 1
      fi
    done

    echo "=== Step 5: Run basic functionality tests ==="
    chmod +x client.sh

    # Run tests and capture results
    echo "Running health check..."
    ./client.sh health > health_test.log 2>&1
    HEALTH_RESULT=$?

    echo "Running models test..."
    ./client.sh models > models_test.log 2>&1
    MODELS_RESULT=$?

    echo "Running chat completion test..."
    ./client.sh chat "Hello, please introduce yourself" 50 > chat_test.log 2>&1
    CHAT_RESULT=$?

    echo "Running completion API test..."
    ./client.sh completion "The future of AI is" 50 > completion_test.log 2>&1
    COMPLETION_RESULT=$?

    echo "=== Step 6: Generate test report ==="
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    REPORT_FILE="../reports/test_report_${TIMESTAMP}.md"

    mkdir -p ../reports

    cat > "$REPORT_FILE" << EOF
# vLLM Server Test Report

**Test Date:** $(date '+%Y-%m-%d %H:%M:%S')
**Container Tool:** nerdctl
**Image:** $IMAGE_NAME
**Port:** $HOST_PORT

## Test Results

### Health Check
- **Status:** $([ $HEALTH_RESULT -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Log:** \`\`\`
$(cat health_test.log)
\`\`\`

### Models Endpoint
- **Status:** $([ $MODELS_RESULT -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Log:** \`\`\`
$(cat models_test.log)
\`\`\`

### Chat Completion
- **Status:** $([ $CHAT_RESULT -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Log:** \`\`\`
$(cat chat_test.log)
\`\`\`

### Completion API
- **Status:** $([ $COMPLETION_RESULT -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Log:** \`\`\`
$(cat completion_test.log)
\`\`\`

## Overall Status

$([ $HEALTH_RESULT -eq 0 ] && [ $MODELS_RESULT -eq 0 ] && [ $CHAT_RESULT -eq 0 ] && [ $COMPLETION_RESULT -eq 0 ] && echo "✅ **All tests passed successfully!**" || echo "❌ **Some tests failed. Please check the logs above.**")

---
*Report generated by build_run_test.sh*
EOF

    echo "Test report saved to: $REPORT_FILE"

    if [ "$SERVE_MODE" = true ]; then
        echo "=== Service Mode: Container kept running ==="
        echo "Container name: $CONTAINER_NAME"
        echo "Service URL: http://localhost:$HOST_PORT"
        echo "Health check: http://localhost:$HOST_PORT/health"
        echo ""
        echo "Useful commands:"
        echo "  View logs: nerdctl logs $CONTAINER_NAME"
        echo "  Stop service: nerdctl stop $CONTAINER_NAME"
        echo "  Remove container: nerdctl rm $CONTAINER_NAME"
        echo "  Test API: ./client.sh health"
        echo ""
        echo "Service is running. Press Ctrl+C to stop."
        
        # Keep the script running and handle Ctrl+C
        trap 'echo ""; echo "Stopping service..."; nerdctl stop $CONTAINER_NAME; nerdctl rm $CONTAINER_NAME; echo "Service stopped"; exit 0' INT
        
        # Wait indefinitely
        while true; do
            sleep 10
            # Check if container is still running
            if ! nerdctl ps | grep -q "$CONTAINER_NAME"; then
                echo "Container stopped unexpectedly"
                exit 1
            fi
        done
    else
        echo "=== Step 7: Stop container ==="
        nerdctl rm -f $CONTAINER_NAME
        echo "=== All steps completed ==="
    fi
fi 