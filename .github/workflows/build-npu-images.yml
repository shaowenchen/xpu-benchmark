name: Build NPU Docker Images

on:
  push:
    branches: [main, master]
    paths:
      - "npu/**"
      - "config/npu/**"
      - ".github/workflows/build-npu-images.yml"
  workflow_dispatch:
    inputs:
      image_type:
        description: "Image type to build"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - training
          - inference
          - stress
      platform:
        description: "Platform to build"
        required: false
        default: "both"
        type: choice
        options:
          - amd64
          - arm64
          - both

env:
  REGISTRY: docker.io
  IMAGE_NAME: shaowenchen/xpu-benchmark

jobs:
  # Stage 1: Build and push arm64 images
  build-arm64-training:
    runs-on: ubuntu-latest
    if: github.event.inputs.image_type == 'all' || github.event.inputs.image_type == 'training' || github.event.inputs.image_type == ''
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push arm64 training image
        run: |
          docker build --platform linux/arm64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest-arm64 -f npu/training/Dockerfile npu/training
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest-arm64
        shell: bash
      - name: Create multi-arch training image
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest-arm64
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest
        shell: bash

  build-arm64-inference:
    runs-on: ubuntu-latest
    needs: build-arm64-training
    if: github.event.inputs.image_type == 'all' || github.event.inputs.image_type == 'inference' || github.event.inputs.image_type == ''
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push arm64 inference image
        run: |
          docker build --platform linux/arm64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest-arm64 -f npu/inference/Dockerfile npu/inference
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest-arm64
        shell: bash
      - name: Create multi-arch inference image
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest-arm64
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest
        shell: bash

  build-arm64-stress:
    runs-on: ubuntu-latest
    needs: build-arm64-inference
    if: github.event.inputs.image_type == 'all' || github.event.inputs.image_type == 'stress' || github.event.inputs.image_type == ''
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push arm64 stress image
        run: |
          docker build --platform linux/arm64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest-arm64 -f npu/stress/Dockerfile npu/stress
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest-arm64
        shell: bash
      - name: Create multi-arch stress image
        run: |
          docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest-arm64
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest
        shell: bash

  # Stage 2: Build and push amd64 images
  build-amd64:
    runs-on: ubuntu-latest
    needs: build-arm64-stress
    if: github.event.inputs.image_type == 'all' || github.event.inputs.image_type == 'training' || github.event.inputs.image_type == ''
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push amd64 training image
        run: |
          docker build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest-amd64 -f npu/training/Dockerfile npu/training
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-training-latest-amd64
        shell: bash

  build-inference-amd64:
    runs-on: ubuntu-latest
    needs: build-amd64
    if: github.event.inputs.image_type == 'all' || github.event.inputs.image_type == 'inference' || github.event.inputs.image_type == ''
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push amd64 inference image
        run: |
          docker build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest-amd64 -f npu/inference/Dockerfile npu/inference
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-inference-latest-amd64
        shell: bash

  build-stress-amd64:
    runs-on: ubuntu-latest
    needs: build-inference-amd64
    if: github.event.inputs.image_type == 'all' || github.event.inputs.image_type == 'stress' || github.event.inputs.image_type == ''
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push amd64 stress image
        run: |
          docker build --platform linux/amd64 -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest-amd64 -f npu/stress/Dockerfile npu/stress
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:npu-stress-latest-amd64
        shell: bash
