name: Build NPU Docker Images

on:
  push:
    branches: [ main, master ]
    paths:
      - 'npu/**'
      - 'config/npu/**'
      - '.github/workflows/build-npu-images.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'npu/**'
      - 'config/npu/**'
      - '.github/workflows/build-npu-images.yml'
  workflow_dispatch:
    inputs:
      image_type:
        description: 'Image type to build'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - training
          - inference
          - stress

env:
  REGISTRY: docker.io
  IMAGE_NAME: shaowenchen/xpu-benchmark
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        image_type: [training, inference, stress]
        include:
          - image_type: training
            dockerfile: npu/training/Dockerfile
            context: npu/training
            tag: npu-training
          - image_type: inference
            dockerfile: npu/inference/Dockerfile
            context: npu/inference
            tag: npu-inference
          - image_type: stress
            dockerfile: npu/stress/Dockerfile
            context: npu/stress
            tag: npu-stress

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          npu/
          config/npu/
          .github/workflows/build-npu-images.yml
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:v0.12.0
        buildkitd-flags: --debug --oci-worker-gc --oci-worker-gc-interval=300

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ matrix.tag }}-latest

    - name: Pre-cleanup
      run: |
        docker system prune -f
        docker builder prune -f
        df -h

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=${{ matrix.tag }}-${{ github.sha }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag }}-cache
        cache-to: |
          type=gha,mode=max,scope=${{ matrix.tag }}-${{ github.sha }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.tag }}-cache,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          DOCKER_BUILDKIT=1
        outputs: type=image,compression=gzip,compression-level=9
        provenance: false

    - name: Post-cleanup
      if: always()
      run: |
        docker system prune -f
        docker builder prune -f
        docker image prune -f
        docker buildx prune -f

    - name: Build summary
      if: always()
      run: |
        echo "Built image: ${{ matrix.tag }}"
        echo "Context: ${{ matrix.context }}"
        echo "Dockerfile: ${{ matrix.dockerfile }}"
        echo "=== Disk Usage ==="
        df -h
        echo "=== Docker System Info ==="
        docker system df
        echo "=== Build Cache Info ==="
        docker buildx du 